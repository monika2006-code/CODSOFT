#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Function to add a task
void addTask(vector<string>& tasks, const string& task) {
    tasks.push_back(task);
    cout << "Task \"" << task << "\" added to the list." << endl;
}

// Function to view all tasks
void viewTasks(const vector<string>& tasks) {
    if (tasks.empty()) {
        cout << "No tasks in the list." << endl;
    } else {
        cout << "Your tasks:" << endl;
        for (size_t i = 0; i < tasks.size(); ++i) {
            cout << i + 1 << ". " << tasks[i] << endl;
        }
    }
}

// Function to delete a task
void deleteTask(vector<string>& tasks, size_t index) {
    if (index > 0 && index <= tasks.size()) {
        string removedTask = tasks[index - 1];
        tasks.erase(tasks.begin() + index - 1);
        cout << "Task \"" << removedTask << "\" removed from the list." << endl;
    } else {
        cout << "Invalid task number." << endl;
    }
}

// Simple menu function to interact with the to-do list manager
void menu(vector<string>& tasks) {
    while (true) {
        cout << "\nTo-Do List Manager" << endl;
        cout << "1. Add Task" << endl;
        cout << "2. View Tasks" << endl;
        cout << "3. Delete Task" << endl;
        cout << "4. Exit" << endl;

        int choice;
        cout << "Choose an option: ";
        cin >> choice;
        cin.ignore();

        switch (choice) {
            case 1: {
                cout << "Enter the task: ";
                string task;
                getline(cin, task);
                addTask(tasks, task);
                break;
            }
            case 2:
                viewTasks(tasks);
                break;
            case 3: {
                cout << "Enter the task number to delete: ";
                size_t taskNumber;
                cin >> taskNumber;
                deleteTask(tasks, taskNumber);
                break;
            }
            case 4:
                cout << "Goodbye!" << endl;
                return;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }
}

int main() {
    vector<string> tasks;
    menu(tasks);
    return 0;
}
